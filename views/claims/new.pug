extends ../dashboard

block inner-content
  .row.mb-5
    .col-12.text-center
      h1 New Claim
  form.needs-validation(enctype='multipart/form-data' novalidate action='/claims' method='POST')
    .row.mb-5
      .col-12
        .row.mb-1
          .col-12
            h2 Information
        .row.mb-3
          .col-md-6
            label(for='employee-name') Name
            input#employee-name.form-control(type='text' value=employeeName readonly=true)
          .col-md-6
            label(for='employee-id') Employee ID
            input#employee-id.form-control(type='number' value=employeeId readonly=true)
        .row
          .col-md-4
            label(for='company-name') Company
            select#company-name.custom-select(name='companyName' required)
              option(value='') Choose..
              each companyName in companyNames
                option(value= companyName)= companyName
            .invalid-feedback
              | Please select a valid company.
            .valid-feedback
              | Looks good!
          .col-md-4
            label(for='cost-centre') Cost Centre
            select#cost-centre.custom-select(name='costCentreNumber' required)
              option(value='') Choose..
              each costCentre in costCentres
                option(value= costCentre)= costCentre
            .invalid-feedback
              | Please select a valid cost centre.
            .valid-feedback
              | Looks good!
          .col-md-4
              label(for='bank-account') Bank Account #
              input#bank-account.form-control(name='bankAccount' placeholder='Leave blank for payroll..' type='text' maxlength='14' minlength='14')
              .invalid-feedback
                | Please enter a 14 digit bank account.
              .valid-feedback
                | Looks good!
    .row.mb-5
      .col-12
        .row.mb-1
          .col-12
            h2 Items
        .row
          .col-12
            div.item(v-for='(item, index) in items')
              hr.my-5(v-show='index !== 0 && items.length > 1')
              .row
                .col-md-1
                  span.badge.badge-warning.badge-pill.badge-lg {{ index + 1 }}
                .col-md-4
                  label(for='date') Date
                  input.date.form-control(:name="'items[' + index + '][date]'" type='date' v-model='item.date' value='' required)
                  .invalid-feedback
                    | Please enter a valid date.
                  .valid-feedback
                    | Looks good!
                .col-md-4
                  label(for='expense-category') Expense Category
                  select#expense-category.custom-select(v-model='item.glDescription' @change='onGlChange(item, $event)' required)
                    option(value='') Choose..
                    each gl in gls
                      option(value=gl.description)= gl.description
                  .invalid-feedback
                    | Please select an expense category.
                  .valid-feedback
                    | Looks good!
                .col-md-2
                  label(for='gl') GL
                  select#gl.custom-select(:name="'items[' + index + '][glDescription]'" v-model='item.glDescription' @change='onGlChange(item, $event)' required)
                    option(value='') Choose..
                    each gl in gls
                      option(value=gl.description)= gl.number
                  .invalid-feedback
                    | Please select a valid GL.
                  .valid-feedback
                    | Looks good!
                .col-md-1.text-right
                  span#remove-item.btn.badge.badge-danger.badge-pill.badge-lg(v-show='index !== 0' @click='items.splice(index, 1)') -
              .row.mb-3
                .col-md-12
                  label(for='description') Description
                  input#description.form-control(:name="'items[' + index + '][description]'" type='text' value='' v-model='item.description' size='70' required)
                  .invalid-feedback
                    | Please enter a description.
                  .valid-feedback
                    | Looks good!
              .row.mb-4
                .col-md-8(v-if='isMileageGlDescription(item.glDescription)')
                  .d-flex.justify-content-between.align-items-center
                    label(for='num-km') # Km Travelled
                    span.badge.badge-secondary.badge-sm.num-km-info(data-toggle='tooltip' data-placement='top' title='' data-original-title='$0.54 < 5000Km, $0.48 > 5000Km') ?
                  .input-group
                    input.num-km.form-control(:name="'items[' + index + '][numKm]'" type='number' value='' v-model.number='item.numKm' min="0" step="0.01" @input='updateItemTotal(item)' required='required')
                    .input-group-append
                      .input-group-text km
                    .invalid-feedback
                      | Please enter the # of kilometers travelled.
                    .valid-feedback
                      | Looks good!
                .col-md-4.upload.custom-file(v-show='!isMileageGlDescription(item.glDescription)')
                  label Receipt
                  input#receipt-file.form-control.custom-file-input(:name="'items[' + index + '][receipt][file]'" type='file' @change='validateReceipt(item, $event)')
                  label.custom-file-label(for='receipt-file') Choose file..
                  .invalid-feedback
                    | Please upload a receipt < 2MB.
                  .valid-feedback
                    | Looks good!
                .col-md-1(v-if='!isMileageGlDescription(item.glDescription)')
                  label(for='receipt-lost') Lost?
                  input#receipt-lost.form-control(:name="'items[' + index + '][receipt][lost]'" v-model='item.receipt.lost' type='checkbox' value='' @change='validateReceipt(item, $event)')
                .col-md-3(v-if='!isMileageGlDescription(item.glDescription)')
                  label(for='receipt-amount') Amount
                  .input-group
                    .input-group-prepend
                      .input-group-text $
                    input#receipt-amount.form-control(:name="'items[' + index + '][receipt][amount]'" v-model.number='item.receipt.amount' min="0" step="0.01" @input='updateItemTotal(item)' type='number' required='required')
                    .invalid-feedback
                      | Please enter a receipt amount > $0.
                    .valid-feedback
                      | Looks good!
                .col-md-4
                  label(for='total') Total
                  .input-group
                    .input-group-prepend
                      .input-group-text $
                    input#total.form-control(name="'items[' + index + '][total]'" type='number' :value='item.total' readonly=true)
        .row
          .col-12
            div#add-item.btn.btn-warning.btn-block.btn-lg(@click='addItem()') Add Item
    .row.mb-1.mb-5
      .col-12
        .d-flex.justify-content-between.align-items-center.mb-3
          h2.mb-0 Summary
          span.badge.badge-success.badge-pill.badge-lg {{ items.length }}
        .row.mb-3
          .col-md-6
            label(for='previous-total-mileage') Previous Total Mileage
            .input-group
              input#previous-total-mileage.form-control(type='number' :value='previousMileage' readonly=true)
              .input-group-append
                .input-group-text km
          .col-md-6
            label(for='carry-mileage') Carry Forward Mileage
            .input-group
              input#carry-mileage.form-control(type='number' :value='carryForwardMileage' readonly=true)
              .input-group-append
                .input-group-text km
        .row.mb-4
          .col-12
            hr
            div
              label(for='total') Total
              .input-group
                .input-group-prepend
                  .input-group-text $
                input#total.form-control(type='number' :value='itemsTotal' readonly=true)
        .row
          .col-12
            button.btn.btn-success.btn-lg.btn-block(type='submit') Submit

block scripts
  script.
    $(document).ready(function () {
      $(document).on('change', '.custom-file-input', function () {
        $(this).next('.custom-file-label').html($(this).val().split('\\').slice(-1)[0]);
      });
    });

  script.
    (function() {
      'use strict';

      window.addEventListener('load', function() {
        var forms = document.getElementsByClassName('needs-validation');
        var validation = Array.prototype.filter.call(forms, function(form) {
          form.addEventListener('submit', function(event) {
            if (form.checkValidity() === false) {
              event.preventDefault();
              event.stopPropagation();
            }
            form.classList.add('was-validated');
          }, false);
        });
      }, false);
    })();

  script.
    // TODO make this dynamic from configuration
    var MILEAGE_GL_DESCRIPTION = "MILEAGE (kilometres traveled using personal vehicle)";
    var expenseClaimApp = new Vue({
      el: '#expense-claim-app',
      data: {
        previousMileage: parseInt(#{previousMileage}),
        costCentreNumber: '',
        bankAccount: '',
        items: [{
          date: '',
          glDescription: '',
          numKm: '',
          receipt: {
            amount: '',
            lost: false,
          },
          description: '',
          total: 0,
        }]
      },
      methods: {
        addItem: function () {
          this.items.push({
            date: '',
            glDescription: '',
            numKm: '',
            receipt: {
              amount: '',
              lost: false,
            },
            description: '',
            total: 0,
          });
        },
        updateItemTotal: function (item) {
          if (this.isMileageGlDescription(item.glDescription)) {
            var cost = 0;
            var remainingInitialMileage = 5000 - this.previousMileage;
            if (remainingInitialMileage > 0) {
              if (item.numKm <= remainingInitialMileage) {
                cost = item.numKm * 0.54;
              } else {
                cost += remainingInitialMileage * 0.54;
                cost += (item.numKm - remainingInitialMileage) * 0.48;
              }
            } else {
              cost = item.numKm * 0.48;
            }

            item.total = Math.round(cost * 100)/100;
          } else {
            item.total = Math.round(item.receipt.amount * 100)/100;
          }
        },
        addTooltip: function (item, event) {
          if (this.isMileageGlDescription(item.glDescription)) {
            this.$nextTick(function () {
              var $numKmInfo = $(event.target).closest('.item').find('.num-km-info');
              if (!$numKmInfo.data('bs.tooltip')) {
                $numKmInfo.tooltip();
              }
            });
          }
        },
        isMileageGlDescription(glDescription) {
          return glDescription === MILEAGE_GL_DESCRIPTION;
        },
        validateReceipt: function (item, event) {
          // necessary due to Vue Vritual DOM removing validity states
          this.$nextTick(function () {
            var $receiptEl = $(event.target).closest('.item').find('#receipt-file').first();
            var validityMessage = '';
            if (!item.receipt.lost) {
              var MB_SIZE_IN_B = 1024000;
              if ($receiptEl[0].files.length === 0 || $receiptEl[0].files[0].size > MB_SIZE_IN_B * 2) {
                validityMessage = 'No file < 2MB and receipt not lost.';
              }
            }
            $receiptEl[0].setCustomValidity(validityMessage);
          });
        },
        onGlChange: function (item, event) {
          this.updateItemTotal(item);
          this.validateReceipt(item, event);
          this.addTooltip(item, event);
        },
      },
      watch: {
        items: {
          immediate: true,
          handler: function () {
            // wait for DOM changes to propagate
            this.$nextTick(function () {
              var $item = $('.item').last();
              $item.find('#receipt-file').first()[0].setCustomValidity('No file < 2MB and receipt not lost.');
            });
          },
        },
      },
      computed: {
        itemsTotal: function () {
          return this.items.reduce((acc, item) => acc + item.total, 0);
        },
        carryForwardMileage: function () {
          return this.previousMileage + this.items.reduce((acc, item) => {
            var amount;
            if (item.glDescription === MILEAGE_GL_DESCRIPTION) {
              amount = parseInt(item.numKm || 0);
            } else {
              amount = 0;
            }

            return acc + amount;
          }, 0);
        },
      },
    });
